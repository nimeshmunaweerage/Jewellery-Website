{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Malshani Senarathne\\\\OneDrive\\\\Desktop\\\\Apex Audit Insight - Copy\\\\apex\\\\src\\\\components\\\\Bestsell.js\";\nimport \"./TripStyles.css\";\nimport TripData from \"../components/TripData\";\nimport Trip1 from \"../assects/img1.jpg\";\nimport Trip2 from \"../assects/img2.jpg\";\nimport Trip3 from \"../assects/img3.jpg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Trip() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"trip\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Recent Trips\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"The concat Javascript multiline comments, also known as block comments, start with a forward slash followed by an asterisk method joins two or more strings. The concat method does not change the existing strings. The concat method returns a new string.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tripcard\",\n      children: [/*#__PURE__*/_jsxDEV(TripData, {\n        image: Trip1,\n        heading: \"Love U Pendant\",\n        price: \"LKR 67,918.00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TripData, {\n        image: Trip2,\n        heading: \"My Tiny Heart Gold Earrings\",\n        price: \"LKR 51,023.00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(TripData, {\n        image: Trip3,\n        heading: \"Diamond Dainty Ring\",\n        price: \"LKR 87,560.00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}\n_c = Trip;\nexport default Trip;\nvar _c;\n$RefreshReg$(_c, \"Trip\");","map":{"version":3,"names":["TripData","Trip1","Trip2","Trip3","jsxDEV","_jsxDEV","Trip","className","children","fileName","_jsxFileName","lineNumber","columnNumber","image","heading","price","_c","$RefreshReg$"],"sources":["C:/Users/Malshani Senarathne/OneDrive/Desktop/Apex Audit Insight - Copy/apex/src/components/Bestsell.js"],"sourcesContent":["import \"./TripStyles.css\";\r\nimport TripData from \"../components/TripData\";\r\nimport Trip1 from \"../assects/img1.jpg\";\r\nimport Trip2 from \"../assects/img2.jpg\";\r\nimport Trip3 from \"../assects/img3.jpg\";\r\n\r\nfunction Trip(){\r\n    return(\r\n        <div className=\"trip\">\r\n            <h1>Recent Trips</h1>\r\n            <p>The concat Javascript multiline comments, also known as block comments,\r\n                 start with a forward slash followed by an asterisk method joins two \r\n                 or more strings. The concat method does not change the existing strings.\r\n                  The concat method returns a new string.</p>\r\n            <div className=\"tripcard\">\r\n                <TripData\r\n                    image={Trip1}\r\n                    heading= \"Love U Pendant\"\r\n                    price= \"LKR 67,918.00\"\r\n                />\r\n\r\n                <TripData\r\n                    image={Trip2}\r\n                    heading= \"My Tiny Heart Gold Earrings\"\r\n                    price= \"LKR 51,023.00\"\r\n                />\r\n\r\n                <TripData\r\n                    image={Trip3}\r\n                    heading= \"Diamond Dainty Ring\"\r\n                    price= \"LKR 87,560.00\"\r\n                />\r\n                \r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Trip;"],"mappings":";AAAA,OAAO,kBAAkB;AACzB,OAAOA,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,KAAK,MAAM,qBAAqB;AACvC,OAAOC,KAAK,MAAM,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,IAAIA,CAAA,EAAE;EACX,oBACID,OAAA;IAAKE,SAAS,EAAC,MAAM;IAAAC,QAAA,gBACjBH,OAAA;MAAAG,QAAA,EAAI;IAAY;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrBP,OAAA;MAAAG,QAAA,EAAG;IAG0C;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,eACjDP,OAAA;MAAKE,SAAS,EAAC,UAAU;MAAAC,QAAA,gBACrBH,OAAA,CAACL,QAAQ;QACLa,KAAK,EAAEZ,KAAM;QACba,OAAO,EAAE,gBAAgB;QACzBC,KAAK,EAAE;MAAe;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eAEFP,OAAA,CAACL,QAAQ;QACLa,KAAK,EAAEX,KAAM;QACbY,OAAO,EAAE,6BAA6B;QACtCC,KAAK,EAAE;MAAe;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC,eAEFP,OAAA,CAACL,QAAQ;QACLa,KAAK,EAAEV,KAAM;QACbW,OAAO,EAAE,qBAAqB;QAC9BC,KAAK,EAAE;MAAe;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAED,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd;AAACI,EAAA,GA9BQV,IAAI;AAgCb,eAAeA,IAAI;AAAC,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}